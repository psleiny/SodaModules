import logging
from alerts_in_ua import Client as AlertsClient
from telethon.tl.types import Message
from telethon.utils import get_display_name
from .. import loader, utils

logger = logging.getLogger(__name__)

# List of Ukrainian regions (oblasts)
ua = [
    "–í—ñ–Ω–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–í–æ–ª–∏–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", 
    "–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", 
    "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", 
    "–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–õ—É–≥–∞–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", 
    "–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", 
    "–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–°—É–º—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", 
    "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", 
    "–ß–µ—Ä–∫–∞—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", 
    "–º—ñ—Å—Ç–æ –ö–∏—ó–≤", "–º—ñ—Å—Ç–æ –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å"
]

class AirAlertMod(loader.Module):
    """üá∫üá¶ Air Alert Warning with region selection and API key setup."""

    strings = {"name": "AirAlert"}

    def __init__(self):
        self.regions = []
        self.nametag = ""
        self.forwards = []
        self.api_key = ""
        self.selected_region = ""
        self.bot_id = None
        self.me = None
        self.alerts_client = None

    async def client_ready(self, client, db) -> None:
        """Initialize client and database settings."""
        self.regions = db.get(self.strings["name"], "regions", [])
        self.nametag = db.get(self.strings["name"], "nametag", "")
        self.forwards = db.get(self.strings["name"], "forwards", [])
        self.api_key = db.get(self.strings["name"], "api_key", "")
        self.selected_region = db.get(self.strings["name"], "selected_region", "")
        self.db = db
        self.client = client
        self.bot_id = (await self.inline.bot.get_me()).id
        self.me = (await client.get_me()).id

        if self.api_key:
            self.alerts_client = AlertsClient(token=self.api_key)

    async def setapikeycmd(self, message: Message) -> None:
        """Command to set the API key."""
        api_key = utils.get_args_raw(message)

        if not api_key:
            await utils.answer(message, "<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã: .setapikey <API_KEY></b>")
            return

        self.api_key = api_key
        self.db.set(self.strings["name"], "api_key", self.api_key)
        self.alerts_client = AlertsClient(token=self.api_key)
        await utils.answer(message, "<b>API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>")

    async def setregioncmd(self, message: Message) -> None:
        """Command to select the region for notifications."""
        region = utils.get_args_raw(message)

        if not region:
            await utils.answer(message, "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.</b>")
            return

        # Check if the entered region is in the predefined list of Ukrainian regions
        if region not in ua:
            await utils.answer(message, "<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–≥–∏–æ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.</b>")
            return

        self.selected_region = region
        self.db.set(self.strings["name"], "selected_region", self.selected_region)
        await utils.answer(message, f"<b>–†–µ–≥–∏–æ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <code>{region}</code></b>")

    async def checkalertcmd(self, message: Message) -> None:
        """Command to check the current alert status for the selected region."""
        if not self.api_key:
            await utils.answer(message, "<b>API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É .setapikey.</b>")
            return

        if not self.selected_region:
            await utils.answer(message, "<b>–†–µ–≥–∏–æ–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É .setregion –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞.</b>")
            return

        try:
            alert_status = self.alerts_client.get_air_raid_alert_status(self.selected_region)

            if alert_status and alert_status.is_active:
                await utils.answer(message, f"<b>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í —Ä–µ–≥–∏–æ–Ω–µ {self.selected_region} —Å–µ–π—á–∞—Å –≤–æ–∑–¥—É—à–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞!</b>")
            else:
                await utils.answer(message, f"<b>‚úÖ –í —Ä–µ–≥–∏–æ–Ω–µ {self.selected_region} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–∑–¥—É—à–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥.</b>")

        except Exception as e:
            logger.error(f"Error fetching alert status: {e}")
            await utils.answer(message, "<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–≤–æ–≥–∏.</b>")

    async def alertforwardcmd(self, message: Message) -> None:
        """Command for managing forwarding of alerts to other chats."""
        text = utils.get_args_raw(message)
        
        if text[:3] == "set":
            self.nametag = text[4:]
            self.db.set(self.strings["name"], "nametag", self.nametag)
            return await utils.answer(
                message, f"üè∑ <b>–¢–∞–±–ª–∏—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: <code>{self.nametag}</code></b>"
            )

        if not text:
            chats = "<b>–¢–µ–∫—É—â–∏–µ —á–∞—Ç—ã –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>\n"
            for chat in self.forwards:
                chats += f"{get_display_name(await self.client.get_entity(chat))}\n"
            await utils.answer(message, chats)
            return

        try:
            chat = (await self.client.get_entity(text.replace("https://", ""))).id
        except Exception:
            await utils.answer(message, "<b>–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>")
            return

        if chat in self.forwards:
            self.forwards.remove(chat)
            self.db.set(self.strings["name"], "forwards", self.forwards)
            await utils.answer(message, "<b>–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>")
        else:
            self.forwards.append(chat)
            self.db.set(self.strings["name"], "forwards", self.forwards)
            await utils.answer(message, "<b>–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>")

    async def watcher(self, message: Message) -> None:
        """Fetch and forward air alert messages based on region."""
        if not self.alerts_client:
            logger.error("API client is not set. Use .setapikey to configure.")
            return

        try:
            alert_status = self.alerts_client.get_air_raid_alert_status(self.selected_region)

            if alert_status and alert_status.is_active:
                tasks = [
                    self.inline.bot.send_message(self.me, f"‚ö†Ô∏è {self.selected_region}: –í–æ–∑–¥—É—à–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞!", parse_mode="HTML")
                ]
                for chat in self.forwards:
                    tasks.append(
                        self.client.send_message(chat, f"‚ö†Ô∏è {self.selected_region}: –í–æ–∑–¥—É—à–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞!\n\n" + self.nametag)
                    )
                await gather(*tasks)

        except Exception as e:
            logger.error(f"Error fetching or forwarding alert: {e}")
