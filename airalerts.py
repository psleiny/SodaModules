import logging
import aiohttp
from asyncio import gather
from aiogram.types import InlineQueryResultArticle, InputTextMessageContent
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.tl.types import Message
from telethon.utils import get_display_name
from .. import loader, utils
from ..inline import GeekInlineQuery, rand

logger = logging.getLogger(__name__)

API_URL = "https://api.alerts.in.ua/v1/alerts/active.json"
IP_GEO_URL = "https://ipinfo.io/json"

class AirAlertMod(loader.Module):
    """üá∫üá¶ Air Alert Warning with region selection and API key setup."""

    strings = {"name": "AirAlert"}

    def __init__(self):
        self.regions = []
        self.nametag = ""
        self.forwards = []
        self.api_key = ""
        self.selected_region = ""
        self.bot_id = None
        self.me = None

    async def client_ready(self, client, db) -> None:
        """Initialize client, regions, and join alert channel."""
        self.regions = db.get(self.strings["name"], "regions", [])
        self.nametag = db.get(self.strings["name"], "nametag", "")
        self.forwards = db.get(self.strings["name"], "forwards", [])
        self.api_key = db.get(self.strings["name"], "api_key", "")
        self.selected_region = db.get(self.strings["name"], "selected_region", "")
        self.db = db
        self.client = client
        self.bot_id = (await self.inline.bot.get_me()).id
        self.me = (await client.get_me()).id

        try:
            entity = await client.get_entity("t.me/air_alert_ua")
            if entity.left:
                await client(JoinChannelRequest(entity))
        except Exception:
            logger.error("Can't join t.me/air_alert_ua")

    async def fetch_alerts(self) -> list:
        """Fetch active alerts from the API."""
        if not self.api_key:
            logger.error("API key is not set. Use .setapikey <YOUR_API_KEY> to set it.")
            return []

        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_URL}?token={self.api_key}") as resp:
                if resp.status == 200:
                    return await resp.json()
                else:
                    logger.error(f"Failed to fetch alerts: {resp.status}")
                    return []

    async def get_ip_region(self) -> str:
        """Determine user's region based on their IP address."""
        async with aiohttp.ClientSession() as session:
            async with session.get(IP_GEO_URL) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    return data.get("region", "")
                else:
                    logger.error(f"Failed to fetch region by IP: {resp.status}")
                    return ""

    async def setapikeycmd(self, message: Message) -> None:
        """Command to set the API key."""
        api_key = utils.get_args_raw(message)

        if not api_key:
            await utils.answer(message, "<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã: .setapikey <API_KEY></b>")
            return

        self.api_key = api_key
        self.db.set(self.strings["name"], "api_key", self.api_key)
        await utils.answer(message, "<b>API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>")

    async def setregioncmd(self, message: Message) -> None:
        """Command to select the region for notifications."""
        region = utils.get_args_raw(message)

        if not region:
            await utils.answer(message, "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.</b>")
            return

        if region not in ua:  # `ua` is the list of Ukrainian regions
            await utils.answer(message, "<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–≥–∏–æ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω.</b>")
            return

        self.selected_region = region
        self.db.set(self.strings["name"], "selected_region", self.selected_region)
        await utils.answer(message, f"<b>–†–µ–≥–∏–æ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <code>{region}</code></b>")

    async def checkalertcmd(self, message: Message) -> None:
        """Command to check the current alert status for the selected region."""
        if not self.api_key:
            await utils.answer(message, "<b>API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É .setapikey.</b>")
            return

        if not self.selected_region:
            await utils.answer(message, "<b>–†–µ–≥–∏–æ–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É .setregion –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞.</b>")
            return

        alerts = await self.fetch_alerts()

        if not alerts:
            await utils.answer(message, "<b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö.</b>")
            return

        active_alerts = [alert for alert in alerts if alert["region"] == self.selected_region]

        if active_alerts:
            await utils.answer(message, f"<b>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í —Ä–µ–≥–∏–æ–Ω–µ {self.selected_region} —Å–µ–π—á–∞—Å –≤–æ–∑–¥—É—à–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞!</b>")
        else:
            await utils.answer(message, f"<b>‚úÖ –í —Ä–µ–≥–∏–æ–Ω–µ {self.selected_region} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–∑–¥—É—à–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥.</b>")

    async def alertforwardcmd(self, message: Message) -> None:
        """Command for managing forwarding of alerts to other chats."""
        text = utils.get_args_raw(message)
        
        if text[:3] == "set":
            self.nametag = text[4:]
            self.db.set(self.strings["name"], "nametag", self.nametag)
            return await utils.answer(
                message, f"üè∑ <b>–¢–∞–±–ª–∏—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: <code>{self.nametag}</code></b>"
            )

        if not text:
            chats = "<b>–¢–µ–∫—É—â–∏–µ —á–∞—Ç—ã –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>\n"
            for chat in self.forwards:
                chats += f"{get_display_name(await self.client.get_entity(chat))}\n"
            await utils.answer(message, chats)
            return

        try:
            chat = (await self.client.get_entity(text.replace("https://", ""))).id
        except Exception:
            await utils.answer(message, "<b>–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>")
            return

        if chat in self.forwards:
            self.forwards.remove(chat)
            self.db.set(self.strings["name"], "forwards", self.forwards)
            await utils.answer(message, "<b>–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>")
        else:
            self.forwards.append(chat)
            self.db.set(self.strings["name"], "forwards", self.forwards)
            await utils.answer(message, "<b>–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>")

    async def watcher(self, message: Message) -> None:
        """Fetch and forward air alert messages based on IP and region."""
        alerts = await self.fetch_alerts()
        user_region = await self.get_ip_region()

        if not alerts:
            return

        relevant_alerts = [
            alert for alert in alerts if alert["region"] == self.selected_region or "all" in self.regions
        ]

        if relevant_alerts:
            tasks = [
                self.inline.bot.send_message(self.me, str(relevant_alerts), parse_mode="HTML")
            ]
            for chat in self.forwards:
                tasks.append(
                    self.client.send_message(chat, str(relevant_alerts) + "\n\n" + self.nametag)
                )
            await gather(*tasks)
