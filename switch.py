# meta developer: @SodaModules

import logging

import telethon

from .. import loader, utils

logger = logging.getLogger(__name__)


async def register(cb):
    cb(SwitchWordsMod())


@loader.tds
class SwitchWordsMod(loader.Module):
    """–ó–∞–º—ñ–Ω–∞ –º–æ–≤–∏ —Ä–æ–∑–∫–ª–∞–¥–∫–∏ –≤ —Ç–µ–∫—Å—Ç—ñ"""

    strings = {"name": "SwitchWords"}

    async def suacmd(self, message):
        """–Ø–∫—â–æ —Ç–∏ –ø—Ä–∏–ø—É—Å—Ç–∏–≤—Å—è –ø–æ–º–∏–ª–∫–∏ —ñ –Ω–∞–±—Ä–∞–≤ —Ç–µ–∫—Å—Ç –Ω–µ –∑–º—ñ–Ω–∏–≤—à–∏ —Ä–æ–∑–∫–ª–∞–¥–∫—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
         —Ç–æ –ø–æ–≤–µ—Ä–Ω–∏—Å—è –≤ –π–æ–≥–æ –ø–æ—á–∞—Ç–æ–∫ —ñ –¥–æ–ø–∏—à–∏ `.sua` —ñ —Ç–≤—ñ–π —Ç–µ–∫—Å—Ç —Å—Ç–∞–Ω–µ —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–º.
         –Ø–∫—â–æ —Ç–∏ –≤—Å–µ –∂ —Ç–∞–∫–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –≤ —Ç—ñ–π —Ä–æ–∑–∫–ª–∞–¥—Ü—ñ, —Ç–æ –ø—Ä–æ—Å—Ç–æ –¥–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –Ω—å–æ–≥–æ —Ü—ñ—î—é –∫–æ–º–∞–Ω–¥–æ—é —ñ –≤—ñ–Ω –∑–º—ñ–Ω–∏—Ç–∏—Å—è.
         —è–∫—â–æ –∂ —Ç–≤—ñ–π —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫ –ø—Ä–∏–ø—É—Å—Ç–∏–≤—Å—è –ø–æ–º–∏–ª–∫–∏, —Ç–æ –ø—Ä–æ—Å—Ç–æ –¥–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –π–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–æ–º–∞–Ω–¥–æ—é –∑–º—ñ–Ω–∏—Ç–∏—Å—è.
        """
        UaKeys = """'–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ó—Ñ—ñ–≤–∞–ø—Ä–æ–ª–¥–∂—î—è—á—Å–º–∏—Ç—å–±—é.‚Ç¥"‚Ññ;%:?–ô–¶–£–ö–ï–ù–ì–®–©–ó–•–á–§–Ü–í–ê–ü–†–û–õ–î–ñ–Ñ/–Ø–ß–°–ú–ò–¢–¨–ë–Æ,"""
        EnKeys = """`qwertyuiop[]asdfghjkl;'zxcvbnm,./~@#$%^&QWERTYUIOP{}ASDFGHJKL:"|ZXCVBNM<>?"""

        if message.is_reply:
            reply = await message.get_reply_message()
            text = reply.raw_text
            if not text:
                await message.edit("–¢—É—Ç –Ω–µ–º–∞—î —Ç–µ–∫—Å—Ç—É...")
                return
            change = str.maketrans(UaKeys + EnKeys, EnKeys + UaKeys)
            text = str.translate(text, change)

            if message.sender_id != reply.sender_id:
                await message.edit(text)
            else:
                await message.delete()
                await reply.edit(text)
        else:
            text = utils.get_args_raw(message)
            if not text:
                await message.edit("–¢—É—Ç –Ω–µ–º–∞—î —Ç–µ–∫—Å—Ç—É...")
                return
            change = str.maketrans(UaKeys + EnKeys, EnKeys + UaKeys)
            text = str.translate(text, change)
            await message.edit(text)

    async def srucmd(self, message):
        """–¢–µ–∂ —Å–∞–º–µ, –∞–ª–µ –Ω–∞ –º–æ—Å–∫–∞–ª—å—Å–∫—ñ–πüí©
        """
        RuKeys = """—ë–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é.–Å"‚Ññ;%:?–ô–¶–£–ö–ï–ù–ì–®–©–ó–•–™–§–´–í–ê–ü–†–û–õ–î–ñ–≠/–Ø–ß–°–ú–ò–¢–¨–ë–Æ,"""
        EnKeys = """`qwertyuiop[]asdfghjkl;'zxcvbnm,./~@#$%^&QWERTYUIOP{}ASDFGHJKL:"|ZXCVBNM<>?"""

        if message.is_reply:
            reply = await message.get_reply_message()
            text = reply.raw_text
            if not text:
                await message.edit("–¢—É—Ç –Ω–µ–º–∞—î —Ç–µ–∫—Å—Ç—É...")
                return
            change = str.maketrans(RuKeys + EnKeys, EnKeys + RuKeys)
            text = str.translate(text, change)

            if message.sender_id != reply.sender_id:
                await message.edit(text)
            else:
                await message.delete()
                await reply.edit(text)
        else:
            text = utils.get_args_raw(message)
            if not text:
                await message.edit("–¢—É—Ç –Ω–µ–º–∞—î —Ç–µ–∫—Å—Ç—É...")
                return
            change = str.maketrans(RuKeys + EnKeys, EnKeys + RuKeys)
            text = str.translate(text, change)
            await message.edit(text)
