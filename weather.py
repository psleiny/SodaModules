# meta developer: @SodaModules

import logging
import aiohttp
import asyncio
import datetime
import random
from aiocache import cached
from telethon.tl.types import Message
from .. import loader, utils

logger = logging.getLogger(__name__)

OPEN_METEO_API_URL = "https://api.open-meteo.com/v1/forecast"
NOMINATIM_API_URL = "https://nominatim.openstreetmap.org/search"

class WeatherMod(loader.Module):
    """–ú–æ–¥—É–ª—å –ø–æ–≥–æ–¥–∏ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º Open-Meteo –∑ –≥–ª–æ–±–∞–ª—å–Ω–∏–º –æ—Ö–æ–ø–ª–µ–Ω–Ω—è–º"""

    strings = {"name": "–ü–æ–≥–æ–¥–∞"}

    def __init__(self):
        self.db = None
        self.client = None
        self.last_update_time = {}  # Stores the last update time to avoid spamming

    async def client_ready(self, client, db):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è."""
        self.db = db
        self.client = client

        # Schedule weather updates for chats
        chat_rooms = self.db.get(self.strings["name"], "weather_rooms", [])
        for chat_id in chat_rooms:
            asyncio.create_task(self.schedule_weather_updates(chat_id))

        # Schedule daily weather summary at 22:30
        asyncio.create_task(self.schedule_daily_summary())

    @cached(ttl=3600)
    async def fetch_open_meteo_weather(self, latitude: float, longitude: float) -> dict:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≥–æ–¥–Ω—ñ –¥–∞–Ω—ñ –∑ Open-Meteo API."""
        params = {
            "latitude": latitude,
            "longitude": longitude,
            "hourly": "temperature_2m,precipitation,wind_speed_10m",
            "current_weather": "true",
            "timezone": "Europe/Kiev"  # Adjust timezone if needed
        }
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(OPEN_METEO_API_URL, params=params) as response:
                    if response.status == 200:
                        return await response.json()
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ Open-Meteo: {response.status}")
                    return None
        except aiohttp.ClientError as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Open-Meteo: {e}")
            return None

    async def geocode_city(self, city: str) -> tuple:
        """–ì–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –º—ñ—Å—Ç–∞ –¥–æ —à–∏—Ä–æ—Ç–∏ —Ç–∞ –¥–æ–≤–≥–æ—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Nominatim (OpenStreetMap)."""
        params = {"q": city, "format": "json", "limit": 1}
        async with aiohttp.ClientSession() as session:
            async with session.get(NOMINATIM_API_URL, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    if data:
                        return float(data[0]["lat"]), float(data[0]["lon"])
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≥–µ–æ–∫–æ–¥—É–≤–∞—Ç–∏ –º—ñ—Å—Ç–æ: {response.status}")
        return None, None

    def random_fun_fact(self) -> str:
        """–í–∏–ø–∞–¥–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑–≤–∞–≥–∏."""
        facts = [
            "üå© –ß–∏ –∑–Ω–∞—î—Ç–µ –≤–∏, —â–æ –±–ª–∏—Å–∫–∞–≤–∫–∞ –º–æ–∂–µ –≤–¥–∞—Ä–∏—Ç–∏ –æ–¥–Ω–µ –π —Ç–µ —Å–∞–º–µ –º—ñ—Å—Ü–µ –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤?",
            "‚òÄÔ∏è –ù–∞–π—Å–ø–µ–∫–æ—Ç–Ω—ñ—à–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ –ó–µ–º–ª—ñ –±—É–ª–∞ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ –≤ –î–æ–ª–∏–Ω—ñ –°–º–µ—Ä—Ç—ñ, –ö–∞–ª—ñ—Ñ–æ—Ä–Ω—ñ—è: 56.7¬∞C!",
            "üåà –í–µ—Å–µ–ª–∫–∞ —Ñ–∞–∫—Ç–∏—á–Ω–æ –∫—Ä—É–≥–ª–∞. –ê–ª–µ –∑ –∑–µ–º–ª—ñ –º–∏ –±–∞—á–∏–º–æ —Ç—ñ–ª—å–∫–∏ –ø—ñ–≤–∫–æ–ª–æ.",
            "‚ùÑÔ∏è –£ –ü—ñ–≤–¥–µ–Ω–Ω–æ–º—É –ü–æ–ª—è—Ä–Ω–æ–º—É –∫–æ–ª—ñ –º–æ–∂–µ –±—É—Ç–∏ —Ö–æ–ª–æ–¥–Ω—ñ—à–µ, –Ω—ñ–∂ –Ω–∞ –ü—ñ–≤–Ω—ñ—á–Ω–æ–º—É –ø–æ–ª—é—Å—ñ!",
            "üí® –í—ñ—Ç–µ—Ä –∑ –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–æ—é —à–≤–∏–¥–∫—ñ—Å—Ç—é 484 –∫–º/–≥–æ–¥ –±—É–≤ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π –Ω–∞ –∞–≤—Å—Ç—Ä–∞–ª—ñ–π—Å—å–∫–æ–º—É –æ—Å—Ç—Ä–æ–≤—ñ –ë–∞—Ä—Ä–æ—É!"
        ]
        return random.choice(facts)

    async def weathercmd(self, message: Message) -> None:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –ø–æ–≥–æ–¥—É –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ –∞–±–æ –º—ñ—Å—Ç–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º."""
        city = utils.get_args_raw(message) or self.db.get(self.strings["name"], "city", "")
        if not city:
            await utils.answer(message, "üö´ –ú—ñ—Å—Ç–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–µ –∞–±–æ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–µ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º.")
            return

        latitude, longitude = await self.geocode_city(city)
        if not latitude or not longitude:
            await utils.answer(message, f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥–ª—è <b>{city}</b>.")
            return

        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≥–æ–¥–Ω—ñ –¥–∞–Ω—ñ –∑ Open-Meteo
        weather_data = await self.fetch_open_meteo_weather(latitude, longitude)
        if not weather_data:
            await utils.answer(message, f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≥–æ–¥–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è <b>{city}</b> –∑ Open-Meteo.")
            return

        # –í–∏—Ç—è–≥–Ω—É—Ç–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –∑ Open-Meteo
        current_weather = weather_data["current_weather"]
        temp = current_weather["temperature"]
        wind_speed = current_weather["windspeed"]
        short_forecast = "–ù–∞—Ä–∞–∑—ñ –±–µ–∑ –æ–ø–∞–¥—ñ–≤" if current_weather["weathercode"] == 0 else "–ú–æ–∂–ª–∏–≤—ñ –æ–ø–∞–¥–∏"

        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        self.save_daily_statistics(city, temp, wind_speed)

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        message_text = (
            f"üå§ <b>–ü–æ–≥–æ–¥–∞ –¥–ª—è {city} (Open-Meteo):</b>\n"
            f"<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {temp}¬∞C\n"
            f"<b>–í—ñ—Ç–µ—Ä:</b> {wind_speed} –º/—Å\n"
            f"<b>–ü—Ä–æ–≥–Ω–æ–∑:</b> {short_forecast}\n"
            f"{self.random_fun_fact()}"
        )

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await utils.answer(message, message_text)

    def save_daily_statistics(self, city: str, temp: float, wind_speed: float) -> None:
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö: –º–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–∞ —Å–µ—Ä–µ–¥–Ω—è —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É."""
        stats = self.db.get(self.strings["name"], f"stats_{city}", {
            "high_temp": -999,
            "low_temp": 999,
            "total_wind_speed": 0,
            "wind_count": 0
        })

        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats["high_temp"] = max(stats.get("high_temp", -999), temp)
        stats["low_temp"] = min(stats.get("low_temp", 999), temp)
        stats["total_wind_speed"] += wind_speed
        stats["wind_count"] += 1

        self.db.set(self.strings["name"], f"stats_{city}", stats)

    async def addweathercmd(self, message: Message) -> None:
        """–î–æ–¥–∞—Ç–∏ —á–∞—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É."""
        chat_id = str(message.chat_id)

        weather_rooms = self.db.get(self.strings["name"], "weather_rooms", [])
        if chat_id not in weather_rooms:
            weather_rooms.append(chat_id)
            self.db.set(self.strings["name"], "weather_rooms", weather_rooms)
            await utils.answer(message, "‚úÖ –¶–µ–π —á–∞—Ç –±—É–ª–æ –¥–æ–¥–∞–Ω–æ –¥–ª—è –ø–æ–≥–æ–¥–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å.")
            asyncio.create_task(self.schedule_weather_updates(chat_id))
        else:
            await utils.answer(message, "‚ö†Ô∏è –¶–µ–π —á–∞—Ç –≤–∂–µ –æ—Ç—Ä–∏–º—É—î –ø–æ–≥–æ–¥–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.")

    async def removeweathercmd(self, message: Message) -> None:
        """–í–∏–¥–∞–ª–∏—Ç–∏ —á–∞—Ç –∑ –ø–æ–≥–æ–¥–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å."""
        chat_id = str(message.chat_id)

        weather_rooms = self.db.get(self.strings["name"], "weather_rooms", [])
        if chat_id in weather_rooms:
            weather_rooms.remove(chat_id)
            self.db.set(self.strings["name"], "weather_rooms", weather_rooms)
            await utils.answer(message, "‚ùå –¶–µ–π —á–∞—Ç –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –ø–æ–≥–æ–¥–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å.")
        else:
            await utils.answer(message, "‚ö†Ô∏è –¶–µ–π —á–∞—Ç –Ω–µ –æ—Ç—Ä–∏–º—É—î –ø–æ–≥–æ–¥–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.")

    async def schedule_weather_updates(self, chat_id: str) -> None:
        """–ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –ø–æ–≥–æ–¥–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è —á–∞—Ç—É –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É."""
        while True:
            current_time = datetime.datetime.now().time()

            # –ù–µ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ 23:00 –¥–æ 6:00
            if current_time >= datetime.time(23, 0) or current_time < datetime.time(6, 0):
                await asyncio.sleep(3600)
                continue

            city = self.db.get(self.strings["name"], "city", "")
            if not city:
                await asyncio.sleep(3600)
                continue

            latitude, longitude = await self.geocode_city(city)
            if not latitude or not longitude:
                await asyncio.sleep(3600)
                continue

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, –∫–æ–ª–∏ –±—É–ª–æ –æ—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (—â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Å–ø–∞–º—É)
            last_time = self.last_update_time.get(chat_id, datetime.datetime.min)
            if (datetime.datetime.now() - last_time).seconds < 3600:
                await asyncio.sleep(3600)
                continue

            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≥–æ–¥–Ω—ñ –¥–∞–Ω—ñ –∑ Open-Meteo
            weather_data = await self.fetch_open_meteo_weather(latitude, longitude)
            if weather_data:
                current_weather = weather_data["current_weather"]
                temp = current_weather["temperature"]
                wind_speed = current_weather["windspeed"]
                short_forecast = "–ù–∞—Ä–∞–∑—ñ –±–µ–∑ –æ–ø–∞–¥—ñ–≤" if current_weather["weathercode"] == 0 else "–ú–æ–∂–ª–∏–≤—ñ –æ–ø–∞–¥–∏"

                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≥–æ–¥–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ —á–∞—Ç
                await self.client.send_message(
                    int(chat_id),
                    f"üå§ <b>–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏ –¥–ª—è {city} (Open-Meteo):</b>\n"
                    f"<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {temp}¬∞C\n"
                    f"<b>–í—ñ—Ç–µ—Ä:</b> {wind_speed} –º/—Å\n"
                    f"<b>–ü—Ä–æ–≥–Ω–æ–∑:</b> {short_forecast}\n"
                    f"{self.random_fun_fact()}"
                )

                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                self.last_update_time[chat_id] = datetime.datetime.now()

            await asyncio.sleep(3600)  # –ß–µ–∫–∞—î–º–æ 1 –≥–æ–¥–∏–Ω—É –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è

    async def schedule_daily_summary(self) -> None:
        """–ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ 22:30."""
        while True:
            now = datetime.datetime.now()
            next_run = datetime.datetime.combine(now.date(), datetime.time(22, 30))
            if now > next_run:
                next_run += datetime.timedelta(days=1)

            await asyncio.sleep((next_run - now).total_seconds())

            chat_rooms = self.db.get(self.strings["name"], "weather_rooms", [])
            city = self.db.get(self.strings["name"], "city", "")

            if city:
                stats = self.db.get(self.strings["name"], f"stats_{city}", None)
                if stats:
                    high_temp = stats.get("high_temp", "N/A")
                    low_temp = stats.get("low_temp", "N/A")
                    avg_wind_speed = stats.get("total_wind_speed", 0) / stats.get("wind_count", 1)

                    summary_message = (
                        f"üìä <b>–©–æ–¥–µ–Ω–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {city}:</b>\n"
                        f"<b>–ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {high_temp}¬∞C\n"
                        f"<b>–ú—ñ–Ω. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {low_temp}¬∞C\n"
                        f"<b>–°–µ—Ä–µ–¥–Ω—è —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É:</b> {avg_wind_speed} –º/—Å"
                    )

                    for chat_id in chat_rooms:
                        await self.client.send_message(int(chat_id), summary_message)

                # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
                self.db.set(self.strings["name"], f"stats_{city}", {
                    "high_temp": -999,
                    "low_temp": 999,
                    "total_wind_speed": 0,
                    "wind_count": 0
                })
