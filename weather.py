import logging
import aiohttp
import asyncio
import datetime
from aiocache import cached
from telethon.tl.types import Message
from .. import loader, utils

logger = logging.getLogger(__name__)

API_URL = "https://api.met.no/weatherapi/locationforecast/2.0/compact"

class WeatherMod(loader.Module):
    """–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –º–æ–¥—É–ª—å –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º API yr.no –∑ –¥–æ–∫–ª–∞–¥–Ω–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é –∑–∞ –¥–µ–Ω—å"""

    strings = {"name": "–ü–æ–≥–æ–¥–∞"}

    def __init__(self):
        self.db = None
        self.client = None

    async def client_ready(self, client, db):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è."""
        self.db = db
        self.client = client

        # Load scheduled weather tasks for chat rooms
        chat_rooms = self.db.get(self.strings["name"], "weather_rooms", [])
        for chat_id in chat_rooms:
            asyncio.create_task(self.schedule_weather_updates(chat_id))

        # Schedule the daily weather summary at 22:30
        asyncio.create_task(self.schedule_daily_summary())

    @cached(ttl=3600)
    async def fetch_weather(self, latitude: float, longitude: float) -> dict:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É –∑ API yr.no."""
        headers = {"User-Agent": "YourWeatherBot/1.0"}
        params = {"lat": latitude, "lon": longitude}

        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(API_URL, params=params, headers=headers) as response:
                    if response.status == 200:
                        return await response.json()
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É: {response.status}")
                    return None
        except aiohttp.ClientError as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É: {e}")
            return None

    async def weathercitycmd(self, message: Message) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º—ñ—Å—Ç–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º."""
        city = utils.get_args_raw(message)
        if city:
            self.db.set(self.strings["name"], "city", city)
            await utils.answer(message, f"üèô –ú—ñ—Å—Ç–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <b>{city}</b>")
        else:
            current_city = self.db.get(self.strings["name"], "city", "üö´ –ù–µ –≤–∫–∞–∑–∞–Ω–æ")
            await utils.answer(message, f"üèô –ü–æ—Ç–æ—á–Ω–µ –º—ñ—Å—Ç–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: <b>{current_city}</b>")

    async def weathercmd(self, message: Message) -> None:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –ø–æ–≥–æ–¥—É –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ –∞–±–æ –º—ñ—Å—Ç–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º."""
        city = utils.get_args_raw(message) or self.db.get(self.strings["name"], "city", "")
        if not city:
            await utils.answer(message, "üö´ –ú—ñ—Å—Ç–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–µ –∞–±–æ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–µ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º.")
            return

        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥–ª—è –º—ñ—Å—Ç–∞
        latitude, longitude = await self.geocode_city(city)
        if not latitude or not longitude:
            await utils.answer(message, f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥–ª—è <b>{city}</b>.")
            return

        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É –∑ yr.no
        weather_data = await self.fetch_weather(latitude, longitude)
        if not weather_data:
            await utils.answer(message, f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É –¥–ª—è <b>{city}</b>. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            return

        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Ç–æ—á–Ω—É –ø–æ–≥–æ–¥—É
        timeseries = weather_data.get("properties", {}).get("timeseries", [])
        if not timeseries:
            await utils.answer(message, f"‚ö†Ô∏è –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É –¥–ª—è <b>{city}</b>.")
            return

        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ—Ç–æ—á–Ω—É –ø–æ–≥–æ–¥—É
        current_weather = timeseries[0]["data"]["instant"]["details"]

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        weather_details = {
            "temperature": self.to_float(current_weather.get("air_temperature", "N/A")),
            "dew_point": self.to_float(current_weather.get("dew_point_temperature", "N/A")),
            "wind_speed": self.to_float(current_weather.get("wind_speed", "N/A")),
            "wind_direction": self.to_float(current_weather.get("wind_from_direction", "N/A")),
            "wind_gust": self.to_float(current_weather.get("wind_speed_of_gust", "N/A")),
            "humidity": self.to_float(current_weather.get("relative_humidity", "N/A")),
            "air_pressure": self.to_float(current_weather.get("air_pressure_at_sea_level", "N/A")),
            "cloud_area_fraction": self.to_float(current_weather.get("cloud_area_fraction", "N/A")),
            "fog_area_fraction": self.to_float(current_weather.get("fog_area_fraction", "N/A")),
            "precipitation_amount": self.to_float(timeseries[0].get("data", {}).get("next_1_hours", {}).get("details", {}).get("precipitation_amount", "N/A")),
            "precipitation_probability": self.to_float(timeseries[0].get("data", {}).get("next_1_hours", {}).get("details", {}).get("probability_of_precipitation", "N/A")),
            "uv_index": self.to_float(current_weather.get("ultraviolet_index_clear_sky", "N/A")),
            "visibility": self.to_float(current_weather.get("visibility", "N/A"))
        }

        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≥–æ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.save_daily_statistics(city, weather_details)

        # –í–∏–≤–æ–¥–∏–º–æ –¥–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É
        await utils.answer(
            message,
            (
                f"üå§ <b>–ü–æ–≥–æ–¥–∞ –¥–ª—è {city}:</b>\n"
                f"<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {weather_details['temperature']}¬∞C\n"
                f"<b>–í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫:</b> {weather_details['dew_point']}¬∞C\n"
                f"<b>–í—ñ—Ç–µ—Ä:</b> {weather_details['wind_speed']} –º/—Å (–ø–æ—Ä–∏–≤–∏: {weather_details['wind_gust']} –º/—Å)\n"
                f"<b>–¢–∏—Å–∫:</b> {weather_details['air_pressure']} –≥–ü–∞\n"
                f"<b>–í–æ–ª–æ–≥—ñ—Å—Ç—å:</b> {weather_details['humidity']}%\n"
                f"<b>–•–º–∞—Ä–Ω—ñ—Å—Ç—å:</b> {weather_details['cloud_area_fraction']}%\n"
                f"<b>–¢—É–º–∞–Ω:</b> {weather_details['fog_area_fraction']}%\n"
                f"<b>–û–ø–∞–¥–∏ –∑–∞ –≥–æ–¥–∏–Ω—É:</b> {weather_details['precipitation_amount']} –º–º\n"
                f"<b>–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤:</b> {weather_details['precipitation_probability']}%\n"
                f"<b>–£–§-—ñ–Ω–¥–µ–∫—Å:</b> {weather_details['uv_index']}\n"
                f"<b>–í–∏–¥–∏–º—ñ—Å—Ç—å:</b> {weather_details['visibility']} –º"
            )
        )

    async def geocode_city(self, city: str) -> tuple:
        """–ì–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –º—ñ—Å—Ç–∞ –¥–æ —à–∏—Ä–æ—Ç–∏ —Ç–∞ –¥–æ–≤–≥–æ—Ç–∏ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É."""
        geocode_url = f"https://nominatim.openstreetmap.org/search?q={utils.escape_html(city)}&format=json&limit=1"
        async with aiohttp.ClientSession() as session:
            async with session.get(geocode_url) as response:
                if response.status == 200:
                    data = await response.json()
                    if data:
                        return float(data[0]["lat"]), float(data[0]["lon"])
        return None, None

    def to_float(self, value):
        """Converts a value to float, returns 0 if conversion fails."""
        try:
            return float(value)
        except (TypeError, ValueError):
            return 0.0

    def save_daily_statistics(self, city: str, weather_details: dict) -> None:
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        stats = self.db.get(self.strings["name"], f"stats_{city}", {
            "high_temp": -999,
            "low_temp": 999,
            "total_precipitation": 0,
            "average_wind_speed": 0,
            "wind_count": 0,
            "max_uv_index": 0  # Ensure max_uv_index exists
        })

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        temperature = weather_details['temperature']
        wind_speed = weather_details['wind_speed']
        precipitation = weather_details['precipitation_amount']
        uv_index = weather_details['uv_index']

        stats["high_temp"] = max(stats.get("high_temp", -999), temperature)
        stats["low_temp"] = min(stats.get("low_temp", 999), temperature)
        stats["total_precipitation"] += precipitation
        stats["average_wind_speed"] = (stats["average_wind_speed"] * stats["wind_count"] + wind_speed) / (stats["wind_count"] + 1)
        stats["wind_count"] += 1
        stats["max_uv_index"] = max(stats.get("max_uv_index", 0), uv_index)  # Use .get() to avoid KeyError

        self.db.set(self.strings["name"], f"stats_{city}", stats)

    async def addweathercmd(self, message: Message) -> None:
        """–î–æ–¥–∞—Ç–∏ —á–∞—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É."""
        chat_id = str(message.chat_id)

        weather_rooms = self.db.get(self.strings["name"], "weather_rooms", [])
        if chat_id not in weather_rooms:
            weather_rooms.append(chat_id)
            self.db.set(self.strings["name"], "weather_rooms", weather_rooms)
            await utils.answer(message, "‚úÖ –¶–µ–π —á–∞—Ç –¥–æ–¥–∞–Ω–æ –¥–ª—è –ø–æ–≥–æ–¥–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å.")
            asyncio.create_task(self.schedule_weather_updates(chat_id))
        else:
            await utils.answer(message, "‚ö†Ô∏è –¶–µ–π —á–∞—Ç –≤–∂–µ –æ—Ç—Ä–∏–º—É—î –ø–æ–≥–æ–¥–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.")

    async def removeweathercmd(self, message: Message) -> None:
        """–í–∏–¥–∞–ª–∏—Ç–∏ —á–∞—Ç –∑ –æ–Ω–æ–≤–ª–µ–Ω—å –ø–æ–≥–æ–¥–∏."""
        chat_id = str(message.chat_id)

        weather_rooms = self.db.get(self.strings["name"], "weather_rooms", [])
        if chat_id in weather_rooms:
            weather_rooms.remove(chat_id)
            self.db.set(self.strings["name"], "weather_rooms", weather_rooms)
            await utils.answer(message, "‚ùå –¶–µ–π —á–∞—Ç –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –ø–æ–≥–æ–¥–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å.")
        else:
            await utils.answer(message, "‚ö†Ô∏è –¶–µ–π —á–∞—Ç –Ω–µ –æ—Ç—Ä–∏–º—É—î –ø–æ–≥–æ–¥–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.")

    async def schedule_weather_updates(self, chat_id: str) -> None:
        """–ü–ª–∞–Ω—É—î–º–æ –ø–æ–≥–æ–¥–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è —á–∞—Ç—É –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É."""
        while True:
            # –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å
            current_time = datetime.datetime.now().time()

            # –Ø–∫—â–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å –∑ 23:00 –¥–æ 6:00, –Ω–µ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            if current_time >= datetime.time(23, 0) or current_time < datetime.time(6, 0):
                await asyncio.sleep(3600)
                continue

            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î –∑–±–µ—Ä–µ–∂–µ–Ω–µ –º—ñ—Å—Ç–æ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏
            city = self.db.get(self.strings["name"], "city", "")
            if not city:
                await asyncio.sleep(3600)
                continue

            latitude, longitude = await self.geocode_city(city)
            if not latitude or not longitude:
                await asyncio.sleep(3600)
                continue

            weather_data = await self.fetch_weather(latitude, longitude)
            if weather_data:
                timeseries = weather_data.get("properties", {}).get("timeseries", [])
                if timeseries:
                    current_weather = timeseries[0]["data"]["instant"]["details"]
                    temperature = current_weather.get("air_temperature", "N/A")
                    wind_speed = current_weather.get("wind_speed", "N/A")
                    wind_gust = current_weather.get("wind_speed_of_gust", "N/A")
                    humidity = current_weather.get("relative_humidity", "N/A")
                    precipitation = timeseries[0].get("data", {}).get("next_1_hours", {}).get("details", {}).get("precipitation_amount", "N/A")

                    await self.client.send_message(
                        int(chat_id),
                        f"üå§ <b>–ü–æ—Ç–æ—á–Ω–∞ –ø–æ–≥–æ–¥–∞ –¥–ª—è {city}:</b>\n"
                        f"<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {temperature}¬∞C\n"
                        f"<b>–í—ñ—Ç–µ—Ä:</b> {wind_speed} –º/—Å (–ø–æ—Ä–∏–≤–∏: {wind_gust} –º/—Å)\n"
                        f"<b>–í–æ–ª–æ–≥—ñ—Å—Ç—å:</b> {humidity}%\n"
                        f"<b>–û–ø–∞–¥–∏ –∑–∞ –≥–æ–¥–∏–Ω—É:</b> {precipitation} –º–º"
                    )

            await asyncio.sleep(3600)  # –ß–µ–∫–∞—î–º–æ 1 –≥–æ–¥–∏–Ω—É –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è

    async def schedule_daily_summary(self) -> None:
        """–ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ 22:30."""
        while True:
            now = datetime.datetime.now()
            next_run = datetime.datetime.combine(now.date(), datetime.time(22, 30))
            if now > next_run:
                next_run += datetime.timedelta(days=1)

            # –ß–µ–∫–∞—î–º–æ –¥–æ 22:30
            await asyncio.sleep((next_run - now).total_seconds())

            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            chat_rooms = self.db.get(self.strings["name"], "weather_rooms", [])
            city = self.db.get(self.strings["name"], "city", "")

            if city:
                stats = self.db.get(self.strings["name"], f"stats_{city}", None)
                if stats:
                    high_temp = stats.get("high_temp", "N/A")
                    low_temp = stats.get("low_temp", "N/A")
                    total_precipitation = stats.get("total_precipitation", "N/A")
                    average_wind_speed = stats.get("average_wind_speed", "N/A")
                    max_uv_index = stats.get("max_uv_index", "N/A")

                    summary_message = (
                        f"üìä <b>–©–æ–¥–µ–Ω–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {city}:</b>\n"
                        f"<b>–ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {high_temp}¬∞C\n"
                        f"<b>–ú—ñ–Ω. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {low_temp}¬∞C\n"
                        f"<b>–ó–∞–≥–∞–ª—å–Ω—ñ –æ–ø–∞–¥–∏:</b> {total_precipitation} –º–º\n"
                        f"<b>–°–µ—Ä–µ–¥–Ω—è —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É:</b> {average_wind_speed} –º/—Å\n"
                        f"<b>–ú–∞–∫—Å. –£–§-—ñ–Ω–¥–µ–∫—Å:</b> {max_uv_index}"
                    )

                    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –∫–æ–∂–Ω–æ–≥–æ —á–∞—Ç—É
                    for chat_id in chat_rooms:
                        await self.client.send_message(int(chat_id), summary_message)

                # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—ñ—Å–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è
                self.db.set(self.strings["name"], f"stats_{city}", {
                    "high_temp": -999,
                    "low_temp": 999,
                    "total_precipitation": 0,
                    "average_wind_speed": 0,
                    "wind_count": 0,
                    "max_uv_index": 0
                })            
