# meta developer: @lir1mod

import logging
import asyncio
import aiohttp
from datetime import datetime, time
from .. import loader, utils

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.DEBUG)

API_URL_OWM = "https://api.openweathermap.org/data/2.5/weather"

@loader.tds
class WeatherMod(loader.Module):
    """–ü–æ–≥–æ–¥–Ω–∏–∫"""

    strings = {
        "name": "Weather",
        "no_args": "<b>–í–∫–∞–∂—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä:</b> <code>{}</code>",
        "city_added": "‚úÖ –ú—ñ—Å—Ç–æ <b>{}</b> –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É –æ–±—Ä–∞–Ω–∏—Ö.",
        "city_removed": "‚ùå –ú—ñ—Å—Ç–æ <b>{}</b> –≤–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É –æ–±—Ä–∞–Ω–∏—Ö.",
        "default_city_set": "üåü –ú—ñ—Å—Ç–æ <b>{}</b> –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —è–∫ –æ—Å–Ω–æ–≤–Ω–µ.",
        "default_city_not_set": "‚ùå –û—Å–Ω–æ–≤–Ω–µ –º—ñ—Å—Ç–æ —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.",
        "chat_added": "‚úÖ –ß–∞—Ç –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É —Ä–æ–∑—Å–∏–ª–∫–∏.",
        "chat_removed": "‚ùå –ß–∞—Ç –≤–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É —Ä–æ–∑—Å–∏–ª–∫–∏.",
        "list_cities": "üìã –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–Ω–∏—Ö –º—ñ—Å—Ç:\n{}",
        "list_chats": "üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:\n{}",
        "weather_response": "üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ <b>{}</b>:\n{}",
        "weather_format": (
            "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {}¬∞C\n"
            "üí® –í—ñ—Ç–µ—Ä: {} –º/—Å\n"
            "üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {}%\n"
            "üî¥ –¢–∏—Å–∫: {} hPa\n"
            "ü§ß –í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫: {}¬∞C\n"
            "‚òÅÔ∏è –•–º–∞—Ä–Ω—ñ—Å—Ç—å: {}%"
        ),
        "update_frequency": "<b>–ß–∞—Å—Ç–æ—Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:</b> {} —Ö–≤–∏–ª–∏–Ω.",
        "silent_mode_enabled": "üîï <b>–†–µ–∂–∏–º —Ç–∏—à—ñ —É–≤—ñ–º–∫–Ω–µ–Ω–æ (22:30 - 06:30).</b>",
        "silent_mode_disabled": "üîî <b>–†–µ–∂–∏–º —Ç–∏—à—ñ –≤–∏–º–∫–Ω–µ–Ω–æ.</b>",
        "weather_no_default": "‚ùå –û—Å–Ω–æ–≤–Ω–µ –º—ñ—Å—Ç–æ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∞–±–æ –¥–æ–¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ <code>.addcity</code>.",
        "weather_no_city": "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø–æ–≥–æ–¥—É –¥–ª—è –º—ñ—Å—Ç–∞ <b>{}</b>. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–µ –º—ñ—Å—Ç–æ.",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "api_key",
                None,
                lambda: "API –∫–ª—é—á OpenWeatherMap. –û—Ç—Ä–∏–º–∞—Ç–∏: https://home.openweathermap.org/api_keys",
                validator=loader.validators.Hidden(loader.validators.String()),
            ),
            loader.ConfigValue(
                "default_city",
                None,
                lambda: "–û—Å–Ω–æ–≤–Ω–µ –º—ñ—Å—Ç–æ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏. –í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞.",
                validator=loader.validators.String(),
            ),
            loader.ConfigValue(
                "cache_timeout",
                600,
                lambda: "–ß–∞—Å –∫–µ—à—É–≤–∞–Ω–Ω—è (—Å–µ–∫—É–Ω–¥)",
                validator=loader.validators.Integer(minimum=60),
            ),
            loader.ConfigValue(
                "update_frequency",
                60,
                lambda: "–ß–∞—Å—Ç–æ—Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (—Ö–≤–∏–ª–∏–Ω)",
                validator=loader.validators.Integer(minimum=1),
            ),
            loader.ConfigValue(
                "silent_mode",
                True,
                lambda: "–£–≤—ñ–º–∫–Ω—É—Ç–∏ —Ä–µ–∂–∏–º —Ç–∏—à—ñ (22:30 - 06:30).",
                validator=loader.validators.Boolean(),
            ),
        )
        self.cache = {}

    async def client_ready(self, client, db):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ —Ç–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö."""
        self.db = db
        self.client = client
        logger.info("–ö–ª—ñ—î–Ω—Ç –≥–æ—Ç–æ–≤–∏–π, –∑–∞–ø—É—Å–∫ –º–æ–¥—É–ª—è –ü–æ–≥–æ–¥–∞.")

    async def addcitycmd(self, message):
        """–î–æ–¥–∞—Ç–∏ –º—ñ—Å—Ç–æ –¥–æ —Å–ø–∏—Å–∫—É –æ–±—Ä–∞–Ω–∏—Ö."""
        city = utils.get_args_raw(message)
        if not city:
            return await utils.answer(message, self.strings["no_args"].format("addcity [–º—ñ—Å—Ç–æ]"))

        cities = self.db.get(self.strings["name"], "cities", [])
        if city not in cities:
            cities.append(city)
            self.db.set(self.strings["name"], "cities", cities)
            await utils.answer(message, self.strings["city_added"].format(city))
        else:
            await utils.answer(message, f"<b>–ú—ñ—Å—Ç–æ <b>{city}</b> –≤–∂–µ –¥–æ–¥–∞–Ω–æ.</b>")

    async def removecitycmd(self, message):
        """–í–∏–¥–∞–ª–∏—Ç–∏ –º—ñ—Å—Ç–æ –∑—ñ —Å–ø–∏—Å–∫—É –æ–±—Ä–∞–Ω–∏—Ö."""
        city = utils.get_args_raw(message)
        if not city:
            return await utils.answer(message, self.strings["no_args"].format("removecity [–º—ñ—Å—Ç–æ]"))

        cities = self.db.get(self.strings["name"], "cities", [])
        if city in cities:
            cities.remove(city)
            self.db.set(self.strings["name"], "cities", cities)
            await utils.answer(message, self.strings["city_removed"].format(city))
        else:
            await utils.answer(message, f"<b>–ú—ñ—Å—Ç–æ <b>{city}</b> –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.</b>")

    async def listcitiescmd(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–Ω–∏—Ö –º—ñ—Å—Ç."""
        cities = self.db.get(self.strings["name"], "cities", [])
        if not cities:
            return await utils.answer(message, "<b>–°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–Ω–∏—Ö –º—ñ—Å—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π.</b>")

        cities_list = "\n".join([f"‚Ä¢ {city}" for city in cities])
        await utils.answer(message, self.strings["list_cities"].format(cities_list))

    async def weathercmd(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≥–æ–¥—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º—ñ—Å—Ç–∞."""
        city = self.config["default_city"]
        if not city:
            return await utils.answer(message, self.strings["weather_no_default"])

        await self.get_weather(message, city)

    async def get_weather(self, message, city):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≥–æ–¥—É –¥–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ –º—ñ—Å—Ç–∞."""
        api_key = self.config["api_key"]
        if not api_key:
            return await utils.answer(message, "‚ùå API –∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω–∏–π.")

        params = {"q": city, "appid": api_key, "units": "metric", "lang": "uk"}
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(API_URL_OWM, params=params) as response:
                    if response.status != 200:
                        return await utils.answer(message, self.strings["weather_no_city"].format(city))

                    data = await response.json()
                    weather = self.strings["weather_format"].format(
                        data["main"]["temp"], data["wind"]["speed"],
                        data["main"]["humidity"], data["main"]["pressure"],
                        data["main"]["feels_like"], data["clouds"]["all"]
                    )
                    await utils.answer(message, self.strings["weather_response"].format(city, weather))
        except Exception as e:
            logger.exception(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏ –¥–ª—è {city}: {e}")
            await utils.answer(message, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–æ–≥–æ–¥–∏.")
