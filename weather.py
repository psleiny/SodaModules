import logging
import re
from urllib.parse import quote_plus
import requests
import xml.etree.ElementTree as ET
from telethon.tl.types import Message

from .. import loader, utils

logger = logging.getLogger(__name__)

n = "\n"
rus = "—ë–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é"
ukr = "—î—ó“ë—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ó—Ñ—ñ–≤–∞–ø—Ä–æ–ª–¥–∂—î—è—á—Å–º–∏—Ç—å–±—é"

API_URL_OWM = "https://api.openweathermap.org/data/2.5/weather"
API_URL_YR = "https://www.yr.no/place/{}/{}/forecast.xml"

def escape_ansi(line):
    ansi_escape = re.compile(r"(\x9B|\x1B\[)[0-?]*[ -\/]*[@-~]")
    return ansi_escape.sub("", line)


class WeatherMod(loader.Module):
    """–ú–æ–¥—É–ª—å –ø–æ–≥–æ–¥–∏ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∞–º–∏ (Advanced Weather Module)"""

    strings = {
        "name": "–ü–æ–≥–æ–¥–∞",
        "city_set": "<b>üèô –í–∞—à–µ –ø–æ—Ç–æ—á–Ω–µ –º—ñ—Å—Ç–æ: <code>{}</code></b>",
        "no_city": "üö´ –ú—ñ—Å—Ç–æ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
        "city_added": "‚úÖ –ú—ñ—Å—Ç–æ <code>{}</code> –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É!",
        "city_removed": "‚ùå –ú—ñ—Å—Ç–æ <code>{}</code> –≤–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É!",
        "api_key_missing": "‚ùó API –∫–ª—é—á OpenWeatherMap –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
        "city_prompt": "‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ç–æ",
        "weather_info": "<b>–ü–æ–≥–æ–¥–∞ –≤ {}: {}</b>",
        "weather_details": "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {}¬∞C\nüí® –í—ñ—Ç–µ—Ä: {} –º/—Å\nüíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {}%\nüî¥ –¢–∏—Å–∫: {} hPa",
        "invalid_city": "‚ùó –ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
        "api_key_set": "üîë API –∫–ª—é—á –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!",
        "service_switched": "üîÑ –°–µ—Ä–≤—ñ—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {}",
        "unsupported_service": "‚ùó –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Å–µ—Ä–≤—ñ—Å. –ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è: OpenWeatherMap, Yr.no",
        "service_missing": "‚ùó –°–µ—Ä–≤—ñ—Å –Ω–µ –≤–∏–±—Ä–∞–Ω–æ",
        "services_list": "–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏: OpenWeatherMap, Yr.no",
        "city_list": "üèô <b>–í–∞—à—ñ –º—ñ—Å—Ç–∞:</b>\n{}",
        "no_cities": "‚ùó –í–∏ –Ω–µ –¥–æ–¥–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –º—ñ—Å—Ç–∞",
    }

    async def client_ready(self, client, db) -> None:
        self.db = db
        self.client = client

    def get_api_key(self) -> str:
        """Retrieve the stored OpenWeatherMap API key."""
        return self.db.get(self.strings["name"], "api_key", "")

    def get_weather_service(self) -> str:
        """Retrieve the currently selected weather service."""
        return self.db.get(self.strings["name"], "service", "OpenWeatherMap")

    def get_city_list(self) -> list:
        """Retrieve the list of stored cities."""
        return self.db.get(self.strings["name"], "cities", [])

    async def weatherkeycmd(self, message: Message) -> None:
        """Set OpenWeatherMap API key"""
        if args := utils.get_args_raw(message):
            self.db.set(self.strings["name"], "api_key", args)
            await utils.answer(message, self.strings["api_key_set"])
        return

    async def weatherservicecmd(self, message: Message) -> None:
        """Switch between OpenWeatherMap and Yr.no"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["service_missing"])
            return

        service = args.strip().lower()
        if service in ["openweathermap", "owm"]:
            service_name = "OpenWeatherMap"
        elif service in ["yr.no", "yrno"]:
            service_name = "Yr.no"
        else:
            await utils.answer(message, self.strings["unsupported_service"])
            return

        self.db.set(self.strings["name"], "service", service_name)
        await utils.answer(message, self.strings["service_switched"].format(service_name))
        return

    async def weathercitycmd(self, message: Message) -> None:
        """–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –º—ñ—Å—Ç–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º (Set default city for forecast)"""
        if args := utils.get_args_raw(message):
            self.db.set(self.strings["name"], "city", args)

        city = self.db.get(self.strings["name"], "city", self.strings["no_city"])
        await utils.answer(message, self.strings["city_set"].format(city))
        return

    async def addcitycmd(self, message: Message) -> None:
        """–î–æ–¥–∞—Ç–∏ –º—ñ—Å—Ç–æ –¥–æ —Å–ø–∏—Å–∫—É (Add city to the city list)"""
        city = utils.get_args_raw(message)
        if not city:
            await utils.answer(message, self.strings["city_prompt"])
            return

        cities = self.get_city_list()
        if city not in cities:
            cities.append(city)
            self.db.set(self.strings["name"], "cities", cities)
            await utils.answer(message, self.strings["city_added"].format(city))
        else:
            await utils.answer(message, f"–ú—ñ—Å—Ç–æ <code>{city}</code> –≤–∂–µ —î –≤ —Å–ø–∏—Å–∫—É.")

    async def delcitycmd(self, message: Message) -> None:
        """–í–∏–¥–∞–ª–∏—Ç–∏ –º—ñ—Å—Ç–æ –∑—ñ —Å–ø–∏—Å–∫—É (Remove city from the city list)"""
        city = utils.get_args_raw(message)
        cities = self.get_city_list()

        if city not in cities:
            await utils.answer(message, self.strings["invalid_city"])
            return

        cities.remove(city)
        self.db.set(self.strings["name"], "cities", cities)

        await utils.answer(message, self.strings["city_removed"].format(city))

    async def listcitiescmd(self, message: Message) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –º—ñ—Å—Ç (Show list of stored cities)"""
        cities = self.get_city_list()
        if not cities:
            await utils.answer(message, self.strings["no_cities"])
            return

        city_list = "\n".join([f"‚Ä¢ {city}" for city in cities])
        await utils.answer(message, self.strings["city_list"].format(city_list))

    async def weathercmd(self, message: Message) -> None:
        """–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ –º—ñ—Å—Ç–∞ (Current forecast for provided city)"""
        service = self.get_weather_service()
        city = utils.get_args_raw(message) or self.db.get(self.strings["name"], "city", "")
        if not city:
            await utils.answer(message, self.strings["city_prompt"])
            return

        try:
            if service == "OpenWeatherMap":
                await self.get_openweathermap_forecast(message, city)
            elif service == "Yr.no":
                await self.get_yrno_forecast(message, city)
            else:
                await utils.answer(message, self.strings["service_missing"])
        except Exception as e:
            logger.error(f"Error fetching weather: {e}")
            await utils.answer(message, "‚ùó –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É.")
        return

    async def get_openweathermap_forecast(self, message: Message, city: str) -> None:
        """Fetch weather data from OpenWeatherMap"""
        api_key = self.get_api_key()
        if not api_key:
            await utils.answer(message, self.strings["api_key_missing"])
            return

        lang = "ua" if city[0].lower() in ukr else "en"
        params = {"q": city, "appid": api_key, "units": "metric", "lang": lang}
        try:
            response = requests.get(API_URL_OWM, params=params)
            response.raise_for_status()
        except requests.exceptions.RequestException:
            await utils.answer(message, self.strings["invalid_city"])
            return

        data = response.json()
        weather_info = self.extract_weather_details(data)
        await utils.answer(message, self.strings["weather_info"].format(data["name"], weather_info))

    async def get_yrno_forecast(self, message: Message, city: str) -> None:
        """Fetch weather data from Yr.no"""
        city_parts = city.split(',')
        if len(city_parts) != 2:
            await utils.answer(message, self.strings["invalid_city"])
            return

        city_name, country = city_parts
        url = API_URL_YR.format(quote_plus(country.strip()), quote_plus(city_name.strip()))
        try:
            response = requests.get(url)
            response.raise_for_status()
        except requests.exceptions.RequestException:
            await utils.answer(message, self.strings["invalid_city"])
            return

        root = ET.fromstring(response.content)
        weather_info = self.extract_weather_details_yrno(root)
        await utils.answer(message, self.strings["weather_info"].format(city_name, weather_info))

    def extract_weather_details(self, data: dict) -> str:
        """Extract and format weather details from OpenWeatherMap data"""
        temp = data["main"]["temp"]
        wind_speed = data["wind"]["speed"]
        humidity = data["main"]["humidity"]
        pressure = data["main"]["pressure"]
        weather_desc = data["weather"][0]["description"]
        return self.strings["weather_details"].format(temp, wind_speed, humidity, pressure) + f"\n{weather_desc}"

    def extract_weather_details_yrno(self, root: ET.Element) -> str:
        """Extract and format weather details from Yr.no XML data"""
        temp = root.find(".//temperature").attrib["value"]
        wind_speed = root.find(".//windSpeed").attrib["mps"]
        humidity = root.find(".//humidity").attrib["value"]
        pressure = root.find(".//pressure").attrib["value"]
        return self.strings["weather_details"].format(temp, wind_speed, humidity, pressure)
