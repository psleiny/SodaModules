import logging
import re
from urllib.parse import quote_plus
import requests
import xml.etree.ElementTree as ET
from telethon.tl.types import Message
from datetime import datetime, timedelta

from .. import loader, utils

logger = logging.getLogger(__name__)

API_URL_OWM = "https://api.openweathermap.org/data/2.5/weather"
API_URL_OWM_FORECAST = "https://api.openweathermap.org/data/2.5/forecast"
API_URL_YR = "https://www.yr.no/place/{}/{}/forecast.xml"

class WeatherMod(loader.Module):
    """–ú–æ–¥—É–ª—å –ø–æ–≥–æ–¥–∏ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∞–º–∏ (Advanced Weather Module)"""

    strings = {
        "name": "–ü–æ–≥–æ–¥–∞",
        "city_set": "<b>üèô –í–∞—à–µ –ø–æ—Ç–æ—á–Ω–µ –º—ñ—Å—Ç–æ: <code>{}</code></b>",
        "no_city": "üö´ –ú—ñ—Å—Ç–æ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
        "city_added": "‚úÖ –ú—ñ—Å—Ç–æ <code>{}</code> –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É!",
        "city_removed": "‚ùå –ú—ñ—Å—Ç–æ <code>{}</code> –≤–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É!",
        "api_key_missing": "‚ùó API –∫–ª—é—á OpenWeatherMap –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
        "city_prompt": "‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ç–æ",
        "weather_info": "<b>–ü–æ–≥–æ–¥–∞ –≤ {}: {}</b>",
        "weather_details": "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {}¬∞C\nüí® –í—ñ—Ç–µ—Ä: {} –º/—Å\nüíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {}%\nüî¥ –¢–∏—Å–∫: {} hPa\nü§ß –í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫: {}¬∞C\n‚òÅÔ∏è –•–º–∞—Ä–Ω—ñ—Å—Ç—å: {}%\nüëÅÔ∏è –í–∏–¥–∏–º—ñ—Å—Ç—å: {} –º",
        "forecast_info": "<b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {} –¥–Ω—ñ–≤ —É {}: {}</b>",
        "history_info": "<b>–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–≥–æ–¥–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 3 –¥–Ω—ñ —É {}: {}</b>",
        "invalid_city": "‚ùó –ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
        "api_key_set": "üîë API –∫–ª—é—á –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!",
        "service_switched": "üîÑ –°–µ—Ä–≤—ñ—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {}",
        "unsupported_service": "‚ùó –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Å–µ—Ä–≤—ñ—Å. –ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è: OpenWeatherMap, Yr.no",
        "service_missing": "‚ùó –°–µ—Ä–≤—ñ—Å –Ω–µ –≤–∏–±—Ä–∞–Ω–æ",
        "units_set": "üå° –û–¥–∏–Ω–∏—Ü—ñ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {}.",
        "frequency_set": "‚è∞ –ß–∞—Å—Ç–æ—Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω—å –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞ –∫–æ–∂–Ω—ñ {} –≥–æ–¥–∏–Ω.",
        "daily_update_set": "üïí –©–æ–¥–µ–Ω–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–µ –Ω–∞ {} –¥–ª—è –º—ñ—Å—Ç–∞ {}.",
    }

    def __init__(self):
        self.weather_cache = {}  # Cache for storing weather data temporarily
        self.units = "metric"  # Default temperature unit (Celsius)
        self.update_frequency = 24  # Default update frequency (daily)

    async def client_ready(self, client, db) -> None:
        self.db = db
        self.client = client

    def get_api_key(self) -> str:
        """Retrieve the stored OpenWeatherMap API key."""
        return self.db.get(self.strings["name"], "api_key", "")

    def get_weather_service(self) -> str:
        """Retrieve the currently selected weather service."""
        return self.db.get(self.strings["name"], "service", "OpenWeatherMap")

    async def weatherkeycmd(self, message: Message) -> None:
        """Set OpenWeatherMap API key"""
        if args := utils.get_args_raw(message):
            self.db.set(self.strings["name"], "api_key", args)
            await utils.answer(message, self.strings["api_key_set"])
        return

    async def setunitscmd(self, message: Message) -> None:
        """Set temperature units (metric or imperial)"""
        args = utils.get_args_raw(message)
        if args in ["metric", "imperial"]:
            self.units = args
            unit_name = "–¶–µ–ª—å—Å—ñ–π" if args == "metric" else "–§–∞—Ä–µ–Ω–≥–µ–π—Ç"
            await utils.answer(message, self.strings["units_set"].format(unit_name))
        else:
            await utils.answer(message, "‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –æ–¥–∏–Ω–∏—Ü—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ 'metric' –∞–±–æ 'imperial'.")
    
    async def setfrequencycmd(self, message: Message) -> None:
        """Set weather update frequency (in hours)"""
        try:
            frequency = int(utils.get_args_raw(message))
            if frequency < 1:
                raise ValueError
            self.update_frequency = frequency
            await utils.answer(message, self.strings["frequency_set"].format(frequency))
        except ValueError:
            await utils.answer(message, "‚ùó –ù–µ–≤—ñ—Ä–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 1, 3, 6).")

    async def scheduleweathercmd(self, message: Message) -> None:
        """Schedule daily weather updates"""
        args = utils.get_args_raw(message).split()
        if len(args) != 2:
            await utils.answer(message, "‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: .scheduleweather <—á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM> <–º—ñ—Å—Ç–æ>")
            return
        
        time, city = args
        try:
            update_time = datetime.strptime(time, "%H:%M").time()
        except ValueError:
            await utils.answer(message, "‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ HH:MM.")
            return
        
        self.db.set(self.strings["name"], "update_time", update_time.strftime("%H:%M"))
        self.db.set(self.strings["name"], "update_city", city)
        await utils.answer(message, self.strings["daily_update_set"].format(update_time, city))

    async def weathercmd(self, message: Message) -> None:
        """–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ –º—ñ—Å—Ç–∞ (Current forecast for provided city)"""
        city = utils.get_args_raw(message) or self.db.get(self.strings["name"], "city", "")
        if not city:
            await utils.answer(message, self.strings["city_prompt"])
            return

        try:
            await self.get_openweathermap_forecast(message, city)
        except Exception as e:
            logger.error(f"Error fetching weather: {e}")
            await utils.answer(message, "‚ùó –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É.")
        return

    async def forecastcmd(self, message: Message) -> None:
        """–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—ñ –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ –º—ñ—Å—Ç–∞ (3-day weather forecast)"""
        city = utils.get_args_raw(message) or self.db.get(self.strings["name"], "city", "")
        if not city:
            await utils.answer(message, self.strings["city_prompt"])
            return

        api_key = self.get_api_key()
        if not api_key:
            await utils.answer(message, self.strings["api_key_missing"])
            return

        # Check cache first
        if city in self.weather_cache and self.weather_cache[city]["timestamp"] > datetime.now() - timedelta(minutes=10):
            forecast_data = self.weather_cache[city]["forecast"]
        else:
            params = {"q": city, "appid": api_key, "units": self.units, "cnt": 3}
            response = requests.get(API_URL_OWM_FORECAST, params=params)
            if response.status_code != 200:
                await utils.answer(message, self.strings["invalid_city"])
                return
            forecast_data = response.json()
            self.weather_cache[city] = {"forecast": forecast_data, "timestamp": datetime.now()}  # Cache the response

        forecast_text = ""
        for forecast in forecast_data["list"][:3]:
            date = datetime.utcfromtimestamp(forecast["dt"]).strftime("%Y-%m-%d")
            temp = forecast["main"]["temp"]
            description = forecast["weather"][0]["description"]
            forecast_text += f"{date}: {temp}¬∞C, {description}\n"

        await utils.answer(message, self.strings["forecast_info"].format(3, city, forecast_text))

    async def historycmd(self, message: Message) -> None:
        """–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–≥–æ–¥–∏ –∑–∞ 3 –¥–Ω—ñ (3-day weather history)"""
        city = utils.get_args_raw(message) or self.db.get(self.strings["name"], "city", "")
        if not city:
            await utils.answer(message, self.strings["city_prompt"])
            return

        api_key = self.get_api_key()
        if not api_key:
            await utils.answer(message, self.strings["api_key_missing"])
            return

        # Simulating weather history using the forecast data
        params = {"q": city, "appid": api_key, "units": self.units, "cnt": 3}
        response = requests.get(API_URL_OWM_FORECAST, params=params)
        if response.status_code != 200:
            await utils.answer(message, self.strings["invalid_city"])
            return
        history_data = response.json()

        history_text = ""
        for forecast in history_data["list"][-3:]:  # Simulating past 3 days
            date = datetime.utcfromtimestamp(forecast["dt"]).strftime("%Y-%m-%d")
            temp = forecast["main"]["temp"]
            description = forecast["weather"][0]["description"]
            history_text += f"{date}: {temp}¬∞C, {description}\n"

        await utils.answer(message, self.strings["history_info"].format(city, history_text))

    async def get_openweathermap_forecast(self, message: Message, city: str) -> None:
        """Fetch weather data from OpenWeatherMap"""
        api_key = self.get_api_key()
        if not api_key:
            await utils.answer(message, self.strings["api_key_missing"])
            return

        lang = "ua" if city[0].lower() in ukr else "en"
        params = {"q": city, "appid": api_key, "units": self.units, "lang": lang}
        try:
            response = requests.get(API_URL_OWM, params=params)
            response.raise_for_status()
        except requests.exceptions.RequestException:
            await utils.answer(message, self.strings["invalid_city"])
            return

        data = response.json()
        weather_info = self.extract_weather_details(data)
        await utils.answer(message, self.strings["weather_info"].format(data["name"], weather_info))

    def extract_weather_details(self, data: dict) -> str:
        """Extract and format weather details from OpenWeatherMap data"""
        temp = data["main"]["temp"]
        wind_speed = data["wind"]["speed"]
        humidity = data["main"]["humidity"]
        pressure = data["main"]["pressure"]
        feels_like = data["main"]["feels_like"]
        cloudiness = data["clouds"]["all"]
        visibility = data.get("visibility", 10000)  # Default visibility is 10,000 meters
        weather_desc = data["weather"][0]["description"]

        return self.strings["weather_details"].format(
            temp, wind_speed, humidity, pressure, feels_like, cloudiness, visibility
        ) + f"\n{weather_desc}"
