import logging
import requests
from telethon.tl.types import Message
from datetime import datetime, time
import asyncio
from time import time as current_time  

from .. import loader, utils

logger = logging.getLogger(__name__)

API_URL_OWM = "https://api.openweathermap.org/data/2.5/weather"


class WeatherMod(loader.Module):
    """–ú–æ–¥—É–ª—å –ø–æ–≥–æ–¥–∏ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏ —â–æ–≥–æ–¥–∏–Ω–∏"""

    strings = {
        "name": "–ü–æ–≥–æ–¥–∞",
        "city_set": "<b>üèô –í–∞—à–µ –ø–æ—Ç–æ—á–Ω–µ –º—ñ—Å—Ç–æ: <code>{}</code></b>",
        "no_city": "üö´ –ú—ñ—Å—Ç–æ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
        "city_prompt": "‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ç–æ",
        "weather_info": "<b>–ü–æ–≥–æ–¥–∞ –≤ {}: {}</b>",
        "weather_details": "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {}¬∞C\nüí® –í—ñ—Ç–µ—Ä: {} –º/—Å\nüíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {}%\nüî¥ –¢–∏—Å–∫: {} hPa\nü§ß –í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫: {}¬∞C\n‚òÅÔ∏è –•–º–∞—Ä–Ω—ñ—Å—Ç—å: {}%\nüëÅÔ∏è –í–∏–¥–∏–º—ñ—Å—Ç—å: {} –º",
        "invalid_city": "‚ùó –ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
        "api_key_missing": "‚ùó API –∫–ª—é—á OpenWeatherMap –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
        "api_key_set": "üîë API –∫–ª—é—á –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!",
        "api_key_invalid": "‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π API –∫–ª—é—á.",
        "api_key_valid": "‚úÖ API –∫–ª—é—á –¥—ñ–π—Å–Ω–∏–π.",
        "chat_added": "‚úÖ –ß–∞—Ç <code>{}</code> –¥–æ–¥–∞–Ω–æ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω—å –ø–æ–≥–æ–¥–∏.",
        "chat_removed": "‚ùå –ß–∞—Ç <code>{}</code> –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –æ–Ω–æ–≤–ª–µ–Ω—å –ø–æ–≥–æ–¥–∏.",
        "chats_list": "üìã –ß–∞—Ç–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω—å –ø–æ–≥–æ–¥–∏:\n{}",
        "no_chats": "üö´ –ù–µ–º–∞—î —á–∞—Ç—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω—å –ø–æ–≥–æ–¥–∏.",
        "frequency_set": "üîÑ –ß–∞—Å—Ç–æ—Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: –∫–æ–∂–Ω—ñ {} —Ö–≤–∏–ª–∏–Ω.",
        "silent_mode_enabled": "üîï –†–µ–∂–∏–º —Ç–∏—à—ñ —É–≤—ñ–º–∫–Ω–µ–Ω–æ (22:30 - 06:30).",
        "silent_mode_disabled": "üîî –†–µ–∂–∏–º —Ç–∏—à—ñ –≤–∏–º–∫–Ω–µ–Ω–æ.",
    }

    def __init__(self):
        self.units = "metric" 
        self.lang = "ua"  
        self.cache = {}  
        self.cache_timeout = 600  
        self.silence_start = time(22, 30)  
        self.silence_end = time(6, 30)  
        self.auto_weather_task = None  

    async def client_ready(self, client, db) -> None:
        self.db = db
        self.client = client

        self.weather_chat_ids = self.db.get(self.strings["name"], "chats", [])
        self.update_frequency = self.db.get(self.strings["name"], "frequency", 60)
        self.silent_mode = self.db.get(self.strings["name"], "silent_mode", True)

        if self.auto_weather_task is None:
            self.auto_weather_task = asyncio.create_task(self.auto_weather_updates())

    def get_api_key(self) -> str:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π API –∫–ª—é—á OpenWeatherMap."""
        return self.db.get(self.strings["name"], "api_key", "")

    async def weatherkeycmd(self, message: Message) -> None:
        """–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ API –∫–ª—é—á OpenWeatherMap"""
        if args := utils.get_args_raw(message):
            self.db.set(self.strings["name"], "api_key", args)
            await utils.answer(message, self.strings["api_key_set"])
        return

    async def weathercitycmd(self, message: Message) -> None:
        """–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –º—ñ—Å—Ç–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º (Set default city for forecast)"""
        if args := utils.get_args_raw(message):
            self.db.set(self.strings["name"], "city", args)

        city = self.db.get(self.strings["name"], "city", self.strings["no_city"])
        await utils.answer(message, self.strings["city_set"].format(city))
        return

    async def weathercmd(self, message: Message) -> None:
        """–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ –º—ñ—Å—Ç–∞ (Current weather for the provided city)"""
        api_key = self.get_api_key()
        if not api_key:
            await utils.answer(message, self.strings["api_key_missing"])
            return

        city = utils.get_args_raw(message) or self.db.get(self.strings["name"], "city", "")
        if not city:
            await utils.answer(message, self.strings["city_prompt"])
            return

        weather_info = await self.get_weather_info(city, api_key)
        if weather_info:
            await utils.answer(message, self.strings["weather_info"].format(city, weather_info))
        return

    async def get_weather_info(self, city: str, api_key: str) -> str:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–≥–æ–¥—É"""
        if city in self.cache and current_time() - self.cache[city]["time"] < self.cache_timeout:
            return self.cache[city]["data"]

        params = {"q": city, "appid": api_key, "units": self.units, "lang": self.lang}
        try:
            response = requests.get(API_URL_OWM, params=params)
            response.raise_for_status()
        except requests.exceptions.RequestException:
            return self.strings["invalid_city"]

        data = response.json()
        weather_info = self.extract_weather_details(data)
        self.cache[city] = {"data": weather_info, "time": current_time()}
        return weather_info

    def extract_weather_details(self, data: dict) -> str:
        """–í–∏—Ç—è–≥—Ç–∏ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –ø–æ–≥–æ–¥–∏ –∑ –¥–∞–Ω–∏—Ö OpenWeatherMap"""
        temp = data["main"]["temp"]
        wind_speed = data["wind"]["speed"]
        humidity = data["main"]["humidity"]
        pressure = data["main"]["pressure"]
        feels_like = data["main"]["feels_like"]
        cloudiness = data["clouds"]["all"]
        weather_desc = data["weather"][0]["description"]

        return self.strings["weather_details"].format(
            temp, wind_speed, humidity, pressure, feels_like, cloudiness, visibility
        ) + f"\n{weather_desc}"

    async def checkapikeycmd(self, message: Message) -> None:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –¥—ñ–π—Å–Ω–∏–π API –∫–ª—é—á."""
        api_key = self.get_api_key()
        if not api_key:
            await utils.answer(message, self.strings["api_key_missing"])
            return

        try:
            response = requests.get(API_URL_OWM, params={"q": "London", "appid": api_key, "units": self.units})
            response.raise_for_status()
            await utils.answer(message, self.strings["api_key_valid"])
        except requests.exceptions.HTTPError:
            await utils.answer(message, self.strings["api_key_invalid"])

    async def setchatcmd(self, message: Message) -> None:
        """–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —á–∞—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å –ø–æ–≥–æ–¥–∏"""
        chat_id = utils.get_chat_id(message)
        if chat_id not in self.weather_chat_ids:
            self.weather_chat_ids.append(chat_id)
            self.db.set(self.strings["name"], "chats", self.weather_chat_ids)  
            await utils.answer(message, self.strings["chat_added"].format(chat_id))
        else:
            await utils.answer(message, f"–ß–∞—Ç <code>{chat_id}</code> –≤–∂–µ –¥–æ–¥–∞–Ω–æ.")
        return

    async def removechatcmd(self, message: Message) -> None:
        """–í–∏–¥–∞–ª–∏—Ç–∏ —á–∞—Ç –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å –ø–æ–≥–æ–¥–∏"""
        chat_id = utils.get_chat_id(message)
        if chat_id in self.weather_chat_ids:
            self.weather_chat_ids.remove(chat_id)
            self.db.set(self.strings["name"], "chats", self.weather_chat_ids)  
            await utils.answer(message, self.strings["chat_removed"].format(chat_id))
        else:
            await utils.answer(message, f"–ß–∞—Ç <code>{chat_id}</code> –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    async def listchatscmd(self, message: Message) -> None:
        """–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ —á–∞—Ç—ñ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å –ø–æ–≥–æ–¥–∏"""
        if self.weather_chat_ids:
            chats = "\n".join([f"‚Ä¢ {chat_id}" for chat_id in self.weather_chat_ids])
            await utils.answer(message, self.strings["chats_list"].format(chats))
        else:
            await utils.answer(message, self.strings["no_chats"])
        return

    async def setfrequencycmd(self, message: Message) -> None:
        """–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —á–∞—Å—Ç–æ—Ç—É –æ–Ω–æ–≤–ª–µ–Ω—å –ø–æ–≥–æ–¥–∏ (–≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö)"""
        args = utils.get_args_raw(message)
        try:
            frequency = int(args)
            if frequency < 1:
                raise ValueError("Frequency must be positive.")
            self.update_frequency = frequency
            self.db.set(self.strings["name"], "frequency", frequency)  
            await utils.answer(message, self.strings["frequency_set"].format(frequency))
        except (ValueError, TypeError):
            await utils.answer(message, "‚ùó –í–∫–∞–∂—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–≤–∏–ª–∏–Ω (–ø–æ–∑–∏—Ç–∏–≤–Ω–µ —Ü—ñ–ª–µ —á–∏—Å–ª–æ).")
        return

    async def toggle_silentcmd(self, message: Message) -> None:
        """–£–≤—ñ–º–∫–Ω—É—Ç–∏ –∞–±–æ –≤–∏–º–∫–Ω—É—Ç–∏ —Ä–µ–∂–∏–º —Ç–∏—à—ñ (22:30 - 06:30)"""
        self.silent_mode = not self.silent_mode
        self.db.set(self.strings["name"], "silent_mode", self.silent_mode) 
        if self.silent_mode:
            await utils.answer(message, self.strings["silent_mode_enabled"])
        else:
            await utils.answer(message, self.strings["silent_mode_disabled"])
        return

    async def auto_weather_updates(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —â–æ–≥–æ–¥–∏–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏"""
        while True:
            now = datetime.now().time()
            if self.silent_mode and (self.silence_start <= now or now < self.silence_end):
                await asyncio.sleep(self.update_frequency * 60)
                continue

            api_key = self.get_api_key()
            if not api_key:
                logger.warning("API –∫–ª—é—á –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                await asyncio.sleep(self.update_frequency * 60)
                continue

            city = self.db.get(self.strings["name"], "city", "")
            if city and self.weather_chat_ids:
                weather_info = await self.get_weather_info(city, api_key)
                if weather_info:
                    for chat_id in self.weather_chat_ids:
                        await self.client.send_message(chat_id, self.strings["weather_info"].format(city, weather_info))

            await asyncio.sleep(self.update_frequency * 60)
